// Load modules

var Code = require('..');
var Hoek = require('hoek');
var Lab = require('lab');


// Declare internals

var internals = {};


// Test shortcuts

var lab = exports.lab = Lab.script();
var describe = lab.describe;
var it = lab.it;


describe('count()', function () {

    it('returns assertion count', function (done) {

        Code.expect(10).to.be.above(5);
        Code.expect('abc').to.be.a.string();
        Hoek.assert(Code.count() === 2);
        done();
    });
});

describe('expect()', function () {

    it('validates assertion', function (done) {

        var exception = false;
        try {
            Code.expect('abcd').to.contain('a');
        }
        catch (err) {
            exception = err;
        }

        Hoek.assert(!exception, exception);
        done();
    });

    it('uses grammar', function (done) {

        var exception = false;
        try {
            Code.expect(10).to.be.above(5);
            Code.expect('abc').to.be.a.string();
            Code.expect([1, 2]).to.be.an.array();
            Code.expect(20).to.be.at.least(20);
            Code.expect('abc').to.have.length(3);
            Code.expect('abc').to.be.a.string().and.contain(['a', 'b']);
            Code.expect(6).to.be.in.range(5, 6);
        }
        catch (err) {
            exception = err;
        }

        Hoek.assert(!exception, exception);
        done();
    });

    it('asserts on invalid condition', function (done) {

        var exception = false;
        try {
            Code.expect('abcd').to.contain('e');
        }
        catch (err) {
            exception = err;
        }

        Hoek.assert(exception.message === 'Expected \'abcd\' to include \'e\'', exception);
        done();
    });

    it('asserts on invalid condition (not)', function (done) {

        var exception = false;
        try {
            Code.expect('abcd').to.not.contain('a');
        }
        catch (err) {
            exception = err;
        }

        Hoek.assert(exception.message === 'Expected \'abcd\' to not include \'a\'', exception);
        done();
    });

    it('asserts on invalid condition (with actual)', function (done) {

        var exception = false;
        try {
            Code.expect('abcd').to.have.length(3);
        }
        catch (err) {
            exception = err;
        }

        Hoek.assert(exception.message === 'Expected \'abcd\' to have a length of 3 but got 4', exception);
        done();
    });

    it('asserts on invalid condition (prefix)', function (done) {

        var exception = false;
        try {
            Code.expect('abcd', 'Oops').to.contain('e');
        }
        catch (err) {
            exception = err;
        }

        Hoek.assert(exception.message === 'Oops: Expected \'abcd\' to include \'e\'', exception);
        done();
    });

    it('asserts on invalid condition (large array, display truncated)', function (done) {

        var exception = false;
        try {
            Code.expect([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]).to.be.a.string();
        }
        catch (err) {
            exception = err;
        }

        Hoek.assert(exception.message === 'Expected [Array(18)] to be a string but got \'array\'', exception);
        done();
    });

    it('asserts on invalid condition (large array, display not truncated)', function (done) {

        var exception = false;
        var origTruncate = Code.settings.truncateMessages;
        try {
            Code.settings.truncateMessages = false;
            Code.expect([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]).to.be.a.string();
        }
        catch (err) {
            exception = err;
        }

        Code.settings.truncateMessages = origTruncate;
        Hoek.assert(exception.message === 'Expected [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 ] to be a string but got \'array\'', exception);
        done();
    });

    it('asserts on invalid condition (large object, display truncated)', function (done) {

        var exception = false;
        try {
            Code.expect({ a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8, i: 9, j: 10 }).to.be.a.string();
        }
        catch (err) {
            exception = err;
        }

        Hoek.assert(exception.message === 'Expected { Object (a, b, ...) } to be a string but got \'object\'', exception);
        done();
    });

    it('asserts on invalid condition (large object, display not truncated)', function (done) {

        var exception = false;
        var origTruncate = Code.settings.truncateMessages;
        try {
            Code.settings.truncateMessages = false;
            Code.expect({ a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8, i: 9, j: 10 }).to.be.a.string();
        }
        catch (err) {
            exception = err;
        }

        Code.settings.truncateMessages = origTruncate;
        Hoek.assert(exception.message === 'Expected { a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8, i: 9, j: 10 } to be a string but got \'object\'', exception);
        done();
    });

    it('handles multi-line error message', function (done) {

        var exception = false;
        var origTruncate = Code.settings.truncateMessages;
        try {
            Code.settings.truncateMessages = false;
            Code.expect({ a: 1, b: '12345678901234567890123456789012345678901234567890' }).to.be.a.string();
        }
        catch (err) {
            exception = err;
        }

        Code.settings.truncateMessages = origTruncate;
        Hoek.assert(exception.message === 'Expected { a: 1,\n  b: \'12345678901234567890123456789012345678901234567890\' } to be a string but got \'object\'', exception);
        done();
    });

    it('asserts on invalid condition (long object values, display truncated)', function (done) {

        var exception = false;
        try {
            Code.expect({ a: 12345678901234567890, b: 12345678901234567890 }).to.be.a.string();
        }
        catch (err) {
            exception = err;
        }

        Hoek.assert(exception.message === 'Expected { Object (a, b) } to be a string but got \'object\'', exception);
        done();
    });

    it('asserts on invalid condition (long object values, display not truncated)', function (done) {

        var exception = false;
        var origTruncate = Code.settings.truncateMessages;
        try {
            Code.settings.truncateMessages = false;
            Code.expect({ a: 12345678901234567890, b: 12345678901234567890 }).to.be.a.string();
        }
        catch (err) {
            exception = err;
        }

        Code.settings.truncateMessages = origTruncate;
        Hoek.assert(exception.message === 'Expected { a: 12345678901234567000, b: 12345678901234567000 } to be a string but got \'object\'', exception);
        done();
    });

    it('asserts on invalid condition (long string, display truncated)', function (done) {

        var exception = false;
        try {
            Code.expect('{ a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8, i: 9, j: 10 }').to.be.a.number();
        }
        catch (err) {
            exception = err;
        }

        Hoek.assert(exception.message === 'Expected \'{ a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g...\' to be a number but got \'string\'', exception);
        done();
    });

    it('asserts on invalid condition (long string, display not truncated)', function (done) {

        var exception = false;
        var origTruncate = Code.settings.truncateMessages;
        try {
            Code.settings.truncateMessages = false;
            Code.expect('{ a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8, i: 9, j: 10 }').to.be.a.number();
        }
        catch (err) {
            exception = err;
        }

        Code.settings.truncateMessages = origTruncate;
        Hoek.assert(exception.message === 'Expected \'{ a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8, i: 9, j: 10 }\' to be a number but got \'string\'', exception);
        done();
    });

    it('resets flags between chained assertions', function (done) {

        var exception = false;
        try {

            Code.expect('abc').to.contain('a').and.to.not.contain('d');
            Code.expect('abc').to.not.contain('d').and.to.contain('a');
            Code.expect('abc').to.not.contain('d').and.to.not.contain('e');
            Code.expect('abc').to.contain('a').and.to.not.contain('d').and.to.contain('c').to.not.contain('f');
            Code.expect(function () {}).to.not.throw().and.to.be.a.function();
            Code.expect(10).to.not.be.about(8, 1).and.to.be.about(9, 1);
            Code.expect(10).to.be.about(9, 1).and.to.not.be.about(8, 1);
        }
        catch (err) {
            exception = err;
        }

        Hoek.assert(!exception, exception);
        done();
    });

    it('uses the global prototype setting when doing deep compares on objects', function (done) {

        var origPrototype = Code.settings.comparePrototypes;
        var exception = false;

        Code.settings.comparePrototypes = false;

        try {

            var obj = Object.create(null);
            Code.expect({}).to.deep.equal(obj);
            obj.foo = 'bar';
            Code.expect({ foo: 'bar' }).to.deep.equal(obj);
            Code.expect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });
        }
        catch (err) {
            exception = err;
        }

        Code.settings.comparePrototypes = origPrototype;
        Hoek.assert(!exception, exception);
        done();
    });

    describe('assertion', function () {

        describe('argument()', function () {

            it('validates correct type', function (done) {

                var grab = function () {

                    return arguments;
                };

                var exception = false;
                try {
                    Code.expect(grab(1, 2, 3)).to.be.arguments();
                }
                catch (err) {
                    exception = err;
                }

                Hoek.assert(!exception, exception);
                done();
            });

            it('invalidates incorrect type', function (done) {

                var exception = false;
                try {
                    Code.expect({ 1: 1, 2: 2, 3: 3, length: 3 }).to.be.arguments();
                }
                catch (err) {
                    exception = err;
                }

                Hoek.assert(exception.message === 'Expected { \'1\': 1, \'2\': 2, \'3\': 3, length: 3 } to be an arguments but got \'object\'', exception);
                done();
            });
        });

        describe('array()', function () {

            it('validates correct type', function (done) {

                var exception = false;
                try {
                    Code.expect([1]).to.be.an.array();
                }
                catch (err) {
                    exception = err;
                }

                Hoek.assert(!exception, exception);
                done();
            });

            it('invalidates incorrect type', function (done) {

                var exception = false;
                try {
                    Code.expect({ 1: 1 }).to.be.an.array();
                }
                catch (err) {
                    exception = err;
                }

                Hoek.assert(exception.message === 'Expected { \'1\': 1 } to be an array but got \'object\'', exception);
                done();
            });
        });

        describe('boolean()', function () {

            it('validates correct type', function (done) {

                var exception = false;
                try {
                    Code.expect(true).to.be.a.boolean();
                }
                catch (err) {
                    exception = err;
                }

                Hoek.assert(!exception, exception);
                done();
            });

            it('invalidates incorrect type', function (done) {

                var exception = false;
                try {
                    Code.expect(undefined).to.be.a.boolean();
                }
                catch (err) {
                    exception = err;
                }

                Hoek.assert(exception.message === 'Expected undefined to be a boolean but got \'undefined\'', exception);
                done();
            });
        });

        describe('buffer()', function () {

            it('validates correct type', function (done) {

                var exception = false;
                try {
                    Code.expect(new Buffer([1])).to.be.a.buffer();
                }
                catch (err) {
                    exception = err;
                }

                Hoek.assert(!exception, exception);
                done();
            });

            it('invalidates incorrect type', function (done) {

                var exception = false;
                try {
                    Code.expect(null).to.be.a.buffer();
                }
                catch (err) {
                    exception = err;
                }

                Hoek.assert(exception.message === 'Expected null to be a buffer but got \'null\'', exception);
                done();
            });
        });

        describe('date()', function () {

            it('validates correct type', function (done) {

                var exception = false;
                try {
                    Code.expect(new Date()).to.be.a.date();
                }
                catch (err) {
                    exception = err;
                }

                Hoek.assert(!exception, exception);
                done();
            });

            it('invalidates incorrect type', function (done) {

                var exception = false;
                try {
                    Code.expect(true).to.be.a.date();
                }
                catch (err) {
                    exception = err;
                }

                Hoek.assert(exception.message === 'Expected true to be a date but got \'boolean\'', exception);
                done();
            });
        });

        describe('function()', function () {

            it('validates correct type', function (done) {

                var exception = false;
                try {
                    Code.expect(function () { }).to.be.a.function();
                }
                catch (err) {
                    exception = err;
                }

                Hoek.assert(!exception, exception);
                done();
            });

            it('invalidates incorrect type', function (done) {

                var exception = false;
                try {
                    Code.expect(false).to.be.a.function();
                }
                catch (err) {
                    exception = err;
                }

                Hoek.assert(exception.message === 'Expected false to be a function but got \'boolean\'', exception);
                done();
            });
        });

        describe('number()', function () {

            it('validates correct type', function (done) {

                var exception = false;
                try {
                    Code.expect(22).to.be.a.number();
                }
                catch (err) {
                    exception = err;
                }

                Hoek.assert(!exception, exception);
                done();
            });

            it('invalidates incorrect type', function (done) {

                var exception = false;
                try {
                    Code.expect(function () { }).to.be.a.number();
                }
                catch (err) {
                    exception = err;
                }

                Hoek.assert(exception.message === 'Expected [Function] to be a number but got \'function\'', exception);
                done();
            });
        });

        describe('regexp()', function () {

            it('validates correct type', function (done) {

                var exception = false;
                try {
                    Code.expect(/a/).to.be.a.regexp();
                }
                catch (err) {
                    exception = err;
                }

                Hoek.assert(!exception, exception);
                done();
            });

            it('invalidates incorrect type', function (done) {

                var exception = false;
                try {
                    Code.expect(new Date()).to.be.a.regexp();
                }
                catch (err) {
                    exception = err;
                }

                Hoek.assert(exception.message.match(/Expected .* GMT.* to be a regexp but got 'date'/), exception);
                done();
            });
        });

        describe('string()', function () {

            it('validates correct type', function (done) {

                var exception = false;
                try {
                    Code.expect('asd').to.be.a.string();
                }
                catch (err) {
                    exception = err;
                }

                Hoek.assert(!exception, exception);
                done();
            });

            it('invalidates incorrect type', function (done) {

                var exception = false;
                try {
                    Code.expect(/a/).to.be.a.string();
                }
                catch (err) {
                    exception = err;
                }

                Hoek.assert(exception.message === 'Expected /a/ to be a string but got \'regexp\'', exception);
                done();
            });
        });

        describe('object()', function () {

            it('validates correct type', function (done) {

                var exception = false;
                try {
                    Code.expect({}).to.be.a.object();
                }
       