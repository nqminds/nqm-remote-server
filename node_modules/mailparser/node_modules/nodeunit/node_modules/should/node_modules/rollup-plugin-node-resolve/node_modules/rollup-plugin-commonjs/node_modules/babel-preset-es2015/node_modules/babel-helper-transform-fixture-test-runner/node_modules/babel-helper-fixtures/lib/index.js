/*istanbul ignore next*/"use strict";

exports.__esModule = true;

var _getIterator2 = require("babel-runtime/core-js/get-iterator");

var _getIterator3 = _interopRequireDefault(_getIterator2);

exports.default = get;
/*istanbul ignore next*/exports.multiple = multiple;
/*istanbul ignore next*/exports.readFile = readFile;

var /*istanbul ignore next*/_pathExists = require("path-exists");

/*istanbul ignore next*/
var _pathExists2 = _interopRequireDefault(_pathExists);

var /*istanbul ignore next*/_tryResolve = require("try-resolve");

/*istanbul ignore next*/
var _tryResolve2 = _interopRequireDefault(_tryResolve);

var /*istanbul ignore next*/_path = require("path");

/*istanbul ignore next*/
var _path2 = _interopRequireDefault(_path);

var /*istanbul ignore next*/_fs = require("fs");

/*istanbul ignore next*/
var _fs2 = _interopRequireDefault(_fs);

var /*istanbul ignore next*/_lodash = require("lodash");

/*istanbul ignore next*/
var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function humanize(val, noext) {
  if (noext) val = /*istanbul ignore next*/_path2.default.basename(val, /*istanbul ignore next*/_path2.default.extname(val));
  return val.replace(/-/g, " ");
}

function assertDirectory(loc) {
  if (! /*istanbul ignore next*/_fs2.default.statSync(loc).isDirectory()) {
    throw new Error( /*istanbul ignore next*/"Expected " + loc + " to be a directory.");
  }
}

function shouldIgnore(name, blacklist) {
  if (blacklist && blacklist.indexOf(name) >= 0) {
    return true;
  }

  var ext = /*istanbul ignore next*/_path2.default.extname(name);
  var base = /*istanbul ignore next*/_path2.default.basename(name, ext);

  return name[0] === "." || ext === ".md" || base === "LICENSE" || base === "options";
}

function get(entryLoc) {
  var suites = [];

  var rootOpts = {};
  var rootOptsLoc = /*istanbul ignore next*/(0, _tryResolve2.default)(entryLoc + "/options");
  if (rootOptsLoc) rootOpts = require(rootOptsLoc);

  /*istanbul ignore next*/
  var _loop = function _loop() {
    if (_isArray) {
      if (_i >= _iterator.length) return "break";
      _ref = _iterator[_i++];
    } else {
      _i = _iterator.next();
      if (_i.done) return "break";
      _ref = _i.value;
    }

    var suiteName = _ref;

    if (shouldIgnore(suiteName)) return (/*istanbul ignore next*/"continue"
      );

    var suite = {
      options: /*istanbul ignore next*/_lodash2.default.clone(rootOpts),
      tests: [],
      title: humanize(suiteName),
      filename: entryLoc + "/" + suiteName
    };

    assertDirectory(suite.filename);
    suites.push(suite);

    var suiteOptsLoc = /*istanbul ignore next*/(0, _tryResolve2.default)(suite.filename + "/options");
    if (suiteOptsLoc) suite.options = require(suiteOptsLoc);

    for ( /*istanbul ignore next*/var _iterator2 = /*istanbul ignore next*/_fs2.default.readdirSync(suite.filename), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
      /*istanbul ignore next*/
      var _ref2;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref2 = _i2.value;
      }

      var taskName = _ref2;

      if (shouldIgnore(taskName)) continue;
      push(taskName, suite.filename + "/" + taskName);
    }

    function push(taskName, taskDir) {
      var actualLocAlias = suiteName + "/" + taskName + "/actual.js";
      var expectLocAlias = suiteName + "/" + taskName + "/expected.js";
      var execLocAlias = suiteName + "/" + taskName + "/exec.js";

      var actualLoc = taskDir + "/actual.js";
      var expectLoc = taskDir + "/expected.js";
      var execLoc = taskDir + "/exec.js";

      if ( /*istanbul ignore next*/_fs2.default.statSync(taskDir).isFile()) {
        var ext = /*istanbul ignore next*/_path2.default.extname(taskDir);
        if (ext !== ".js" && ext !== ".module.js") return;

        execLoc = taskDir;
      }

      if ( /*istanbul ignore next*/_tryResolve2.default.relative(expectLoc + "on")) {
        expectLoc += "on";
        expectLocAlias += "on";
      }

      var taskOpts = /*istanbul ignore next*/_lodash2.default.cloneDeep(suite.options);

      var taskOptsLoc = /*istanbul ignore next*/(0, _tryResolve2.default)(taskDir + "/options");
      if (taskOptsLoc) /*istanbul ignore next*/_lodash2.default.merge(taskOpts, require(taskOptsLoc));

      var test = {
        title: humanize(taskName, true),
        disabled: taskName[0] === ".",
        options: taskOpts,
        exec: {
          loc: execLoc,
          code: readFile(execLoc),
          filename: execLocAlias
        },
        actual: {
          loc: actualLoc,
          code: readFile(actualLoc),
          filename: actualLocAlias
        },
        expect: {
          loc: expectLoc,
          code: readFile(expectLoc),
          filename: expectLocAlias
        }
      };

      // traceur checks

      if (test.exec.code.indexOf("// Async.") >= 0) {
        return;
      }

      suite.tests.push(test);

      var sourceMappingsLoc = taskDir + "/source-mappings.json";
      if ( /*istanbul ignore next*/_pathExists2.default.sync(sourceMappingsLoc)) {
        test.sourceMappings = JSON.parse(readFile(sourceMappingsLoc));
      }

      var sourceMapLoc = taskDir + "/source-map.json";
      if ( /*istanbul ignore next*/_pathExists2.default.sync(sourceMapLoc)) {
        test.sourceMap = JSON.parse(readFile(sourceMapLoc));
      }
    }
  };

  /*istanbul ignore next*/
  _loop2: for ( /*istanbul ignore next*/var _iterator = /*istanbul ignore next*/_fs2.default.readdirSync(entryLoc), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
    /*istanbul ignore next*/
    var _ref;

    var _ret = _loop();

    switch (_ret) {
      case "break":
        break _loop2;

      case "continue":
        continue;}
  }

  return suites;
}

function multiple(entryLoc, ignore) {
  var categories = {};

  for ( /*istanbul ignore next*/var _iterator3 = /*istanbul ignore next*/_fs2.default.readdirSync(entryLoc), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {
    /*istanbul ignore next*/
    var _ref3;

    if (_isArray3) {
      if (_i3 >= _iterator3.length) break;
      _ref3 = _iterator3[_i3++];
    } else {
      _i3 = _iterator3.next();
      if (_i3.done) break;
      _ref3 = _i3.value;
    }

    var name = _ref3;

    if (shouldIgnore(name, ignore)) continue;

    var _loc = /*istanbul ignore next*/_path2.default.join(entryLoc, name);
    assertDirectory(_loc);

    categories[name] = get(_loc);
  }

  return categories;
}

function readFile(filename) {
  if ( /*istanbul ignore next*/_pathExists2.default.sync(filename)) {
    var file = /*istanbul ignore next*/_lodash2.default.trimEnd( /*istanbul ignore next*/_fs2.default.readFileSync(filename, "utf8"));
    file = file.replace(/\r\n/g, "\n");
    return file;
  } else {
    return "";
  }
}