{
  "name": "ddp",
  "version": "0.11.0",
  "description": "Node.js module to connect to servers using DDP protocol.",
  "author": {
    "name": "Tom Coleman",
    "email": "tom@thesnail.org",
    "url": "http://tom.thesnail.org"
  },
  "contributors": [
    {
      "name": "Thomas Sarlandie",
      "email": "thomas@sarlandie.net",
      "url": "http://www.sarfata.org"
    },
    {
      "name": "Mason Gravitt",
      "email": "emgee@gravitronic.com"
    },
    {
      "name": "Mike Bannister",
      "email": "notimpossiblemike@gmail.com",
      "url": "http://po.ssibiliti.es"
    },
    {
      "name": "Chris Mather",
      "email": "mather.chris@gmail.com",
      "url": "http://eventedmind.com"
    },
    {
      "name": "Tarang Patel"
    },
    {
      "name": "Vaughn Iverson",
      "email": "vsivsi@yahoo.com"
    },
    {
      "name": "Rony Kubat",
      "email": "rony@kubat.org"
    }
  ],
  "license": "MIT/X11",
  "main": "lib/ddp-client",
  "keywords": [
    "ddp",
    "meteor",
    "protocol"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/oortcloud/node-ddp-client.git"
  },
  "dependencies": {
    "ddp-underscore-patched": "0.8.1-2",
    "ddp-ejson": "0.8.1-3",
    "faye-websocket": "~0.9.4"
  },
  "devDependencies": {
    "mocha": "~2.2.1",
    "sinon": "~1.14.1",
    "rewire": "~2.3.1"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha test"
  },
  "engines": {
    "node": "*"
  },
  "bugs": {
    "url": "https://github.com/oortcloud/node-ddp-client/issues"
  },
  "gitHead": "22be7603b6478d02b5a373699b813f2627d19aa9",
  "readme": "Node DDP Client\r\n===============\r\n\r\nA callback style [DDP](https://github.com/meteor/meteor/blob/devel/packages/livedata/DDP.md) ([Meteor](http://meteor.com/)'s Distributed Data Protocol) node client, originally based alansikora's [node-js_ddp-client](https://github.com/alansikora/node-js_ddp-client) and Meteor's python client. Uses a more callback style approach.\r\n\r\nThe client implements version 1 of DDP, as well as fallbacks to pre1 and pre2.\r\n\r\nInstallation\r\n============\r\n\r\n```\r\n  npm install ddp\r\n```\r\n\r\nAuthentication\r\n==============\r\nBuilt-in authentication support was removed in ddp 0.7.0 due to changes in Meteor version 0.8.2.\r\n\r\nOne can authenticate using plain-text logins as follows:\r\n\r\n```js\r\n// logging in with e-mail\r\nddpclient.call(\"login\", [\r\n  { user : { email : \"user@domain.com\" }, password : \"password\" }\r\n], function (err, result) { ... });\r\n\r\n// logging in with username\r\nddpclient.call(\"login\", [\r\n  { user : { username : \"username\" }, password : \"password\" }\r\n], function (err, result) { ... });\r\n```\r\n\r\nYou can also use [vsivsi/ddp-login](https://github.com/vsivsi/ddp-login).\r\n\r\n\r\nExample\r\n=======\r\n\r\nPlease see the example in `examples/example.js`. Or here for reference:\r\n\r\n```js\r\nvar DDPClient = require(\"ddp\");\r\n\r\nvar ddpclient = new DDPClient({\r\n  // All properties optional, defaults shown\r\n  host : \"localhost\",\r\n  port : 3000,\r\n  ssl  : false,\r\n  autoReconnect : true,\r\n  autoReconnectTimer : 500,\r\n  maintainCollections : true,\r\n  ddpVersion : '1',  // ['1', 'pre2', 'pre1'] available\r\n  // uses the SockJs protocol to create the connection\r\n  // this still uses websockets, but allows to get the benefits\r\n  // from projects like meteorhacks:cluster\r\n  // (for load balancing and service discovery)\r\n  // do not use `path` option when you are using useSockJs\r\n  useSockJs: true,\r\n  // Use a full url instead of a set of `host`, `port` and `ssl`\r\n  // do not set `useSockJs` option if `url` is used\r\n  url: 'wss://example.com/websocket'\r\n});\r\n\r\n/*\r\n * Connect to the Meteor Server\r\n */\r\nddpclient.connect(function(error, wasReconnect) {\r\n  // If autoReconnect is true, this callback will be invoked each time\r\n  // a server connection is re-established\r\n  if (error) {\r\n    console.log('DDP connection error!');\r\n    return;\r\n  }\r\n\r\n  if (wasReconnect) {\r\n    console.log('Reestablishment of a connection.');\r\n  }\r\n\r\n  console.log('connected!');\r\n\r\n  setTimeout(function () {\r\n    /*\r\n     * Call a Meteor Method\r\n     */\r\n    ddpclient.call(\r\n      'deletePosts',             // name of Meteor Method being called\r\n      ['foo', 'bar'],            // parameters to send to Meteor Method\r\n      function (err, result) {   // callback which returns the method call results\r\n        console.log('called function, result: ' + result);\r\n      },\r\n      function () {              // callback which fires when server has finished\r\n        console.log('updated');  // sending any updated documents as a result of\r\n        console.log(ddpclient.collections.posts);  // calling this method\r\n      }\r\n    );\r\n  }, 3000);\r\n\r\n  /*\r\n   * Call a Meteor Method while passing in a random seed.\r\n   * Added in DDP pre2, the random seed will be used on the server to generate\r\n   * repeatable IDs. This allows the same id to be generated on the client and server\r\n   */\r\n  var Random = require(\"ddp-random\"),\r\n      random = Random.createWithSeeds(\"randomSeed\");  // seed an id generator\r\n\r\n  ddpclient.callWithRandomSeed(\r\n    'createPost',              // name of Meteor Method being called\r\n    [{ _id : random.id(),      // generate the id on the client\r\n      body : \"asdf\" }],\r\n    \"randomSeed\",              // pass the same seed to the server\r\n    function (err, result) {   // callback which returns the method call results\r\n      console.log('called function, result: ' + result);\r\n    },\r\n    function () {              // callback which fires when server has finished\r\n      console.log('updated');  // sending any updated documents as a result of\r\n      console.log(ddpclient.collections.posts);  // calling this method\r\n    }\r\n  );\r\n\r\n  /*\r\n   * Subscribe to a Meteor Collection\r\n   */\r\n  ddpclient.subscribe(\r\n    'posts',                  // name of Meteor Publish function to subscribe to\r\n    [],                       // any parameters used by the Publish function\r\n    function () {             // callback when the subscription is complete\r\n      console.log('posts complete:');\r\n      console.log(ddpclient.collections.posts);\r\n    }\r\n  );\r\n\r\n  /*\r\n   * Observe a collection.\r\n   */\r\n  var observer = ddpclient.observe(\"posts\");\r\n  observer.added = function(id) {\r\n    console.log(\"[ADDED] to \" + observer.name + \":  \" + id);\r\n  };\r\n  observer.changed = function(id, oldFields, clearedFields, newFields) {\r\n    console.log(\"[CHANGED] in \" + observer.name + \":  \" + id);\r\n    console.log(\"[CHANGED] old field values: \", oldFields);\r\n    console.log(\"[CHANGED] cleared fields: \", clearedFields);\r\n    console.log(\"[CHANGED] new fields: \", newFields);\r\n  };\r\n  observer.removed = function(id, oldValue) {\r\n    console.log(\"[REMOVED] in \" + observer.name + \":  \" + id);\r\n    console.log(\"[REMOVED] previous value: \", oldValue);\r\n  };\r\n  setTimeout(function() { observer.stop() }, 6000);\r\n});\r\n\r\n/*\r\n * Useful for debugging and learning the ddp protocol\r\n */\r\nddpclient.on('message', function (msg) {\r\n  console.log(\"ddp message: \" + msg);\r\n});\r\n\r\n/*\r\n * Close the ddp connection. This will close the socket, removing it\r\n * from the event-loop, allowing your application to terminate gracefully\r\n */\r\nddpclient.close();\r\n\r\n/*\r\n * If you need to do something specific on close or errors.\r\n * You can also disable autoReconnect and\r\n * call ddpclient.connect() when you are ready to re-connect.\r\n*/\r\nddpclient.on('socket-close', function(code, message) {\r\n  console.log(\"Close: %s %s\", code, message);\r\n});\r\n\r\nddpclient.on('socket-error', function(error) {\r\n  console.log(\"Error: %j\", error);\r\n});\r\n\r\n/*\r\n * You can access the EJSON object used by ddp.\r\n */\r\nvar oid = new ddpclient.EJSON.ObjectID();\r\n```\r\n\r\nSockJS Mode\r\n===============\r\n\r\nBy using the `useSockJs` option like below, DDP connection will use [SockJs](https://github.com/sockjs) protocol to establish the WebSocket connection.\r\n\r\n```js\r\nvar ddpClient = new DDPClient({ useSockJs: true });\r\n```\r\n\r\nMeteor server uses SockJs to implement it's DDP server. With this mode, we can get the benefits provided by [meteorhacks:cluster](https://github.com/meteorhacks/cluster). Some of those are load balancing and service discovery.\r\n\r\n* For load balancing you don't need to anything.\r\n* For service discovery, just use the `path` option to identify the service you are referring to.\r\n\r\n> With this mode, `path` option has a special meaning. So, thing twice before using `path` option when you are using this option.\r\n\r\nUnimplemented Features\r\n====\r\nThe node DDP client does not implement ordered collections, something that while in the DDP spec has not been implemented in Meteor yet.\r\n\r\nThanks\r\n======\r\n\r\nMany thanks to Alan Sikora for the ddp-client which formed the inspiration for this code.\r\n\r\nContributions:\r\n * Tom Coleman (@tmeasday)\r\n * Thomas Sarlandie (@sarfata)\r\n * Mason Gravitt (@emgee3)\r\n * Mike Bannister (@possiblities)\r\n * Chris Mather (@eventedmind)\r\n * James Gill (@jagill)\r\n * Vaughn Iverson (@vsivsi)\r\n",
  "readmeFilename": "README.markdown",
  "homepage": "https://github.com/oortcloud/node-ddp-client#readme",
  "_id": "ddp@0.11.0",
  "_shasum": "fa9df2548c987b2daa58f06d8d3eaa7c386cbe1b",
  "_from": "git://github.com/nqminds/node-ddp-client.git",
  "_resolved": "git://github.com/nqminds/node-ddp-client.git#22be7603b6478d02b5a373699b813f2627d19aa9"
}
